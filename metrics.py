import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
from functools import lru_cache
import logging
from typing import Tuple, Optional, Dict
import gspread
from google.oauth2.service_account import Credentials
from config import get_google_creds

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
sns.set_theme()
sns.set_palette("husl")
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
METRIC_ICONS = {"weight": "üèãÔ∏è", "reps": "üîÑ", "sets": "‚úñÔ∏è", "progress": "üìà"}


def load_sheet(worksheet_name: str) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
    try:
        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(get_google_creds(), scopes=scope)
        sheet = gspread.authorize(creds).open("training").worksheet(worksheet_name)

        df = pd.DataFrame(sheet.get_all_records())
        numeric_cols = ["‚Ññ_–Ω–µ–¥–µ–ª–∏", "–≤–µ—Å_–∫–≥", "–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", "‚Ññ_–ø–æ–¥—Ö–æ–¥–∞"]
        df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, errors="coerce")
        return df.dropna()
    except Exception as e:
        logger.error(f"Sheet loading error: {str(e)}")
        return pd.DataFrame()


def calculate_effort(df: pd.DataFrame) -> pd.DataFrame:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —É—Å–∏–ª–∏–π —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏"""
    conditions = [
        (df["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"] == 1),
        (df["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"].between(2, 3)),
        (df["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"].between(4, 5)),
        (df["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"].between(6, 8)),
        (df["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"].between(9, 12)),
        (df["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"] >= 13),
    ]
    coefficients = np.select(conditions, [1.0, 0.95, 0.90, 0.85, 0.80, 0.75], 1.0)
    df["—É—Å–ª_–µ–¥"] = (df["–≤–µ—Å_–∫–≥"] * 0.8 * df["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"] * coefficients).round()
    return df


def get_comparison_data(df: pd.DataFrame, period: str) -> Dict:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""
    current_week = df["‚Ññ_–Ω–µ–¥–µ–ª–∏"].max()

    if period == "week":
        prev_week = current_week - 1
    elif period == "month":
        prev_week = current_week - 4
    else:  # alltime
        prev_week = df["‚Ññ_–Ω–µ–¥–µ–ª–∏"].min()

    return {
        "current": df[df["‚Ññ_–Ω–µ–¥–µ–ª–∏"] == current_week],
        "previous": df[df["‚Ññ_–Ω–µ–¥–µ–ª–∏"] == prev_week],
    }


def generate_metrics_report(comparison_data: Dict, period_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
    report = [f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_name}</b>\n"]

    for exercise in comparison_data["current"]["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"].unique():
        current = comparison_data["current"][
            comparison_data["current"]["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"] == exercise
        ]
        previous = comparison_data["previous"][
            comparison_data["previous"]["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"] == exercise
        ]

        if not previous.empty:
            # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            delta_units = current["—É—Å–ª_–µ–¥"].sum() - previous["—É—Å–ª_–µ–¥"].sum()
            delta_weight = current["–≤–µ—Å_–∫–≥"].mean() - previous["–≤–µ—Å_–∫–≥"].mean()
            delta_reps = current["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"].mean() - previous["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"].mean()

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report.append(
                f"\n{METRIC_ICONS['progress']} <b>{exercise}</b>\n"
                f"  –£—Å–ª.–µ–¥–∏–Ω–∏—Ü—ã: {previous['—É—Å–ª_–µ–¥'].sum():.0f} ‚Üí {current['—É—Å–ª_–µ–¥'].sum():.0f} "
                f"({delta_units:+.0f})\n"
                f"{METRIC_ICONS['weight']} –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {previous['–≤–µ—Å_–∫–≥'].mean():.1f}–∫–≥ ‚Üí "
                f"{current['–≤–µ—Å_–∫–≥'].mean():.1f}–∫–≥ ({delta_weight:+.1f}–∫–≥)\n"
                f"{METRIC_ICONS['reps']} –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {previous['–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'].mean():.0f} ‚Üí "
                f"{current['–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'].mean():.0f} ({delta_reps:+.0f})\n"
                f"{METRIC_ICONS['sets']} –ü–æ–¥—Ö–æ–¥–æ–≤: {len(current)}"
            )

    return "\n".join(report) if len(report) > 1 else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"


def create_progress_plots(df: pd.DataFrame) -> BytesIO:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 18))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –£—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ –Ω–µ–¥–µ–ª—è–º
    units = df.groupby(["‚Ññ_–Ω–µ–¥–µ–ª–∏", "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"])["—É—Å–ª_–µ–¥"].sum().unstack()
    units.plot(kind="line", marker="o", ax=ax1)
    ax1.set_title("–î–∏–Ω–∞–º–∏–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
    ax1.grid(True)

    # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å
    weights = df.groupby(["‚Ññ_–Ω–µ–¥–µ–ª–∏", "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"])["–≤–µ—Å_–∫–≥"].mean().unstack()
    weights.plot(kind="line", marker="o", ax=ax2)
    ax2.set_title("–°—Ä–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –≤–µ—Å (–∫–≥)")
    ax2.grid(True)

    # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–µ–¥–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    reps = df.groupby(["‚Ññ_–Ω–µ–¥–µ–ª–∏", "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"])["–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"].mean().unstack()
    reps.plot(kind="line", marker="o", ax=ax3)
    ax3.set_title("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
    ax3.grid(True)

    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format="png", dpi=120)
    buf.seek(0)
    plt.close()
    return buf


def generate_progress_report(
    worksheet_name: str, period: str = "week"
) -> Tuple[str, Optional[BytesIO]]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
    try:
        period_names = {"week": "–Ω–µ–¥–µ–ª—é", "month": "–º–µ—Å—è—Ü", "alltime": "–≤—Å—ë –≤—Ä–µ–º—è"}

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = calculate_effort(load_sheet(worksheet_name))
        if df.empty:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", None

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_data = get_comparison_data(df, period)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        text_report = generate_metrics_report(comparison_data, period_names[period])
        plot_buffer = create_progress_plots(df)

        return text_report, plot_buffer

    except Exception as e:
        logger.error(f"Report generation failed: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}", None
