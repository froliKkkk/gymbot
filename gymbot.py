from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from gsheets import add_workout
from metrics import (
    load_sheet,
    generate_progress_report,
    calculate_effort,
    get_comparison_data,
    generate_metrics_report,
    create_progress_plots,
)

from config import TOKEN, ALLOWED_USER_IDS


# –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
MAIN_MENU, WORKOUT_DAY, ANALYTICS_DAY, ANALYTICS_TYPE = range(4)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="add_workout")],
        [InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="show_analysis")],
    ]
    await update.message.reply_text(
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π GymBot!", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data["menu_state"] = MAIN_MENU


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_menu":
        await show_main_menu(query)
        context.user_data["menu_state"] = MAIN_MENU
        return

    if query.data == "back":
        current_state = context.user_data.get("menu_state", MAIN_MENU)
        if current_state in [WORKOUT_DAY, ANALYTICS_DAY]:
            await show_main_menu(query)
            context.user_data["menu_state"] = MAIN_MENU
        elif current_state == ANALYTICS_TYPE:
            await show_analytics_days(query)
            context.user_data["menu_state"] = ANALYTICS_DAY
        return

    if query.data == "add_workout":
        await show_workout_days(query)
        context.user_data["menu_state"] = WORKOUT_DAY

    elif query.data == "show_analysis":
        await show_analytics_days(query)
        context.user_data["menu_state"] = ANALYTICS_DAY

    elif query.data in ["upper1", "lower1", "upper2", "lower2"]:
        context.user_data["current_day"] = query.data
        await handle_workout_day(query, context)

    elif query.data.startswith("analytics_"):
        context.user_data["analytics_day"] = query.data.replace("analytics_", "")
        await show_analytics_types(query)
        context.user_data["menu_state"] = ANALYTICS_TYPE

    elif query.data in ["week_analysis", "month_analysis", "alltime_analysis"]:
        await generate_analytics(query, context)


async def show_main_menu(query):
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="add_workout")],
        [InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="show_analysis")],
    ]
    await query.edit_message_text(
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_workout_days(query):
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä—Ö —Ç–µ–ª–∞ 1", callback_data="upper1")],
        [InlineKeyboardButton("–ù–∏–∑ —Ç–µ–ª–∞ 1", callback_data="lower1")],
        [InlineKeyboardButton("–í–µ—Ä—Ö —Ç–µ–ª–∞ 2", callback_data="upper2")],
        [InlineKeyboardButton("–ù–∏–∑ —Ç–µ–ª–∞ 2", callback_data="lower2")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    await query.edit_message_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_analytics_days(query):
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä—Ö —Ç–µ–ª–∞ 1", callback_data="analytics_upper1")],
        [InlineKeyboardButton("–ù–∏–∑ —Ç–µ–ª–∞ 1", callback_data="analytics_lower1")],
        [InlineKeyboardButton("–í–µ—Ä—Ö —Ç–µ–ª–∞ 2", callback_data="analytics_upper2")],
        [InlineKeyboardButton("–ù–∏–∑ —Ç–µ–ª–∞ 2", callback_data="analytics_lower2")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    await query.edit_message_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_analytics_types(query):
    keyboard = [
        [InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="week_analysis")],
        [InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="month_analysis")],
        [InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="alltime_analysis")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    await query.edit_message_text(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_workout_day(query, context):
    await query.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {context.user_data['current_day']} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ññ –Ω–µ–¥–µ–ª–∏, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, ‚Ññ –ø–æ–¥—Ö–æ–¥–∞, –≤–µ—Å, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Ä–∞–∑–≥—Ä—É–∑–∫–∞ (–¥–∞/–Ω–µ—Ç)\n\n"
        "–ü—Ä–∏–º–µ—Ä: 5, –ñ–∏–º —à—Ç–∞–Ω–≥–∏, 1, 60, 8, –Ω–µ—Ç"
    )


async def handle_workout_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "current_day" not in context.user_data:
        return

    try:
        data = update.message.text.split(",")
        if len(data) != 6:
            raise ValueError("–ù—É–∂–Ω–æ 6 –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")

        week_num = int(data[0].strip())
        exercise = data[1].strip()
        set_num = int(data[2].strip())
        weight = float(data[3].strip())
        reps = int(data[4].strip())
        deload = data[5].strip().lower() == "–¥–∞"

        success = add_workout(
            context.user_data["current_day"],
            week_num,
            exercise,
            set_num,
            weight,
            reps,
            deload,
        )

        await update.message.reply_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!" if success else "‚ùå –û—à–∏–±–∫–∞!"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def generate_analytics(query, context):
    day = context.user_data["analytics_day"]
    period_map = {
        "week_analysis": "week",
        "month_analysis": "month",
        "alltime_analysis": "alltime",
    }
    period_type = period_map.get(query.data, "week")
    period_names = {"week": "–Ω–µ–¥–µ–ª—é", "month": "–º–µ—Å—è—Ü", "alltime": "–≤—Å—ë –≤—Ä–µ–º—è"}

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = calculate_effort(load_sheet(day))
        if df.empty:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_data = get_comparison_data(df, period_type)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        text_report = generate_metrics_report(
            comparison_data, period_names[period_type]
        )

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        plot_buffer = create_progress_plots(df)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–µ—Ä–∏–æ–¥–∞–º", callback_data="back")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ—Ç—á–µ—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if plot_buffer:
            await query.message.reply_photo(
                photo=plot_buffer,
                caption=text_report,
                reply_markup=reply_markup,
                parse_mode="HTML",
            )
        else:
            await query.message.reply_text(
                text_report, reply_markup=reply_markup, parse_mode="HTML"
            )

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_workout_data)
    )
    app.run_polling()


if __name__ == "__main__":
    main()
